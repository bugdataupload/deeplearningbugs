[
  {
    "node type": "number",
    "accuracy": "0.800186741363212\n",
    "training time": 1394.34,
    "line number": "(41, 13)",
    "node content": "<Number: 0>",
    "related code": "grad_time = 0\n"
  },
  {
    "node type": "and_test",
    "accuracy": "",
    "training time": "",
    "line number": "(481, 59)",
    "node content": "PythonNode(and_test, [PythonNode(comparison, [<Name: cost@481,7>, PythonNode(comp_op, [<Keyword: is>, <Keyword: not>]), <Keyword: None>]), <Keyword: and>, PythonNode(atom_expr, [<Name: isinstance@481,28>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: cost@481,39>, PythonNode(trailer, [<Operator: .>, <Name: type@481,44>])]), <Operator: ,>, <Name: NullType@481,50>]), <Operator: )>])])])",
    "related code": "    if cost is not None and isinstance(cost.type, NullType):\n"
  },
  {
    "node type": "and_test",
    "accuracy": "",
    "training time": "",
    "line number": "(496, 41)",
    "node content": "PythonNode(and_test, [PythonNode(not_test, [<Keyword: not>, <Name: using_list@496,11>]), <Keyword: and>, PythonNode(not_test, [<Keyword: not>, <Name: using_tuple@496,30>])])",
    "related code": "    if not using_list and not using_tuple:\n"
  },
  {
    "node type": "and_test",
    "accuracy": "0.800186741363212\n",
    "training time": 1496.16,
    "line number": "(593, 37)",
    "node content": "PythonNode(and_test, [<Name: add_names@593,7>, <Keyword: and>, PythonNode(comparison, [<Name: cost@593,21>, PythonNode(comp_op, [<Keyword: is>, <Keyword: not>]), <Keyword: None>])])",
    "related code": "    if add_names and cost is not None:\n"
  },
  {
    "node type": "not_test",
    "accuracy": "",
    "training time": "",
    "line number": "(625, 23)",
    "node content": "PythonNode(not_test, [<Keyword: not>, <Name: using_list@625,13>])",
    "related code": "    elif not using_list:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "0.800186741363212\n",
    "training time": 1502.59,
    "line number": "(633, 64)",
    "node content": "<Keyword: False>",
    "related code": "def subgraph_grad(wrt, end, start=None, cost=None, details=False):\n"
  },
  {
    "node type": "number",
    "accuracy": "0.800186741363212\n",
    "training time": 1532.45,
    "line number": "(1625, 34)",
    "node content": "<Number: 2>",
    "related code": "def verify_grad(fun, pt, n_tests=2, rng=None, eps=None,\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(474, 16)",
    "node content": "<Keyword: is>",
    "related code": "    if tensor is None:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(477, 14)",
    "node content": "<Keyword: is>",
    "related code": "    if cost is None:\n"
  },
  {
    "node type": "not_test",
    "accuracy": "",
    "training time": "",
    "line number": "(496, 21)",
    "node content": "PythonNode(not_test, [<Keyword: not>, <Name: using_list@496,11>])",
    "related code": "    if not using_list and not using_tuple:\n"
  },
  {
    "node type": "not_test",
    "accuracy": "",
    "training time": "",
    "line number": "(496, 41)",
    "node content": "PythonNode(not_test, [<Keyword: not>, <Name: using_tuple@496,30>])",
    "related code": "    if not using_list and not using_tuple:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(516, 21)",
    "node content": "<Keyword: is>",
    "related code": "    if known_grads is None:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(625, 12)",
    "node content": "<Keyword: not>",
    "related code": "    elif not using_list:\n"
  },
  {
    "node type": "operator",
    "accuracy": "0.800186741363212\n",
    "training time": 1622.96,
    "line number": "(629, 16)",
    "node content": "<Operator: +=>",
    "related code": "    grad_time += t1 - t0\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(855, 27)",
    "node content": "<Keyword: is>",
    "related code": "    if consider_constant is None:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "0.800186741363212\n",
    "training time": 1539.22,
    "line number": "(125, 39)",
    "node content": "<Keyword: False>",
    "related code": "    def filter(self, data, strict=False, allow_downcast=None):\n"
  },
  {
    "node type": "keyword",
    "accuracy": "0.800186741363212\n",
    "training time": 1491.36,
    "line number": "(144, 44)",
    "node content": "<Keyword: True>",
    "related code": "    def value_eq(a, b, force_same_dtype=True):\n"
  },
  {
    "node type": "operator",
    "accuracy": "",
    "training time": "",
    "line number": "(486, 40)",
    "node content": "<Operator: !=>",
    "related code": "    if cost is not None and cost.ndim != 0:\n"
  },
  {
    "node type": "number",
    "accuracy": "",
    "training time": "",
    "line number": "(486, 42)",
    "node content": "<Number: 0>",
    "related code": "    if cost is not None and cost.ndim != 0:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(496, 10)",
    "node content": "<Keyword: not>",
    "related code": "    if not using_list and not using_tuple:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(496, 29)",
    "node content": "<Keyword: not>",
    "related code": "    if not using_list and not using_tuple:\n"
  },
  {
    "node type": "not_test",
    "accuracy": "",
    "training time": "",
    "line number": "(500, 41)",
    "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@500,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: elem@500,26>, <Operator: ,>, <Name: Variable@500,32>]), <Operator: )>])])])",
    "related code": "        if not isinstance(elem, Variable):\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(505, 18)",
    "node content": "<Keyword: not>",
    "related code": "    if cost is not None:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(507, 25)",
    "node content": "<Keyword: not>",
    "related code": "    if known_grads is not None:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(523, 18)",
    "node content": "<Keyword: not>",
    "related code": "    if cost is not None:\n"
  },
  {
    "node type": "operator",
    "accuracy": "0.800186741363212\n",
    "training time": 1477.72,
    "line number": "(629, 21)",
    "node content": "<Operator: ->",
    "related code": "    grad_time += t1 - t0\n"
  },
  {
    "node type": "not_test",
    "accuracy": "",
    "training time": "",
    "line number": "(784, 51)",
    "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@784,15>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: connection_pattern@784,26>, <Operator: ,>, <Name: list@784,46>]), <Operator: )>])])])",
    "related code": "        if not isinstance(connection_pattern, list):\n"
  },
  {
    "node type": "operator",
    "accuracy": "",
    "training time": "",
    "line number": "(806, 37)",
    "node content": "<Operator: ==>",
    "related code": "    assert len(connection_pattern) == len(node.inputs)\n"
  },
  {
    "node type": "keyword",
    "accuracy": "0.800186741363212\n",
    "training time": 1482.18,
    "line number": "(1393, 16)",
    "node content": "<Keyword: not>",
    "related code": "    if dtype not in tensor.float_dtypes:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "0.800186741363212\n",
    "training time": 1454.18,
    "line number": "(481, 18)",
    "node content": "<Keyword: not>",
    "related code": "    if cost is not None and isinstance(cost.type, NullType):\n"
  },
  {
    "node type": "keyword",
    "accuracy": "0.800186741363212\n",
    "training time": 1389.8,
    "line number": "(486, 18)",
    "node content": "<Keyword: not>",
    "related code": "    if cost is not None and cost.ndim != 0:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(500, 14)",
    "node content": "<Keyword: not>",
    "related code": "        if not isinstance(elem, Variable):\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(524, 18)",
    "node content": "<Keyword: in>",
    "related code": "        if cost in known_grads:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(784, 14)",
    "node content": "<Keyword: not>",
    "related code": "        if not isinstance(connection_pattern, list):\n"
  },
  {
    "node type": "operator",
    "accuracy": "",
    "training time": "",
    "line number": "(790, 37)",
    "node content": "<Operator: !=>",
    "related code": "        if len(connection_pattern) != len(node.inputs):\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(888, 17)",
    "node content": "<Keyword: in>",
    "related code": "        if var in accounted_for:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(893, 17)",
    "node content": "<Keyword: in>",
    "related code": "        if var in consider_constant:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(938, 17)",
    "node content": "<Keyword: in>",
    "related code": "        if var in visited:\n"
  },
  {
    "node type": "number",
    "accuracy": "0.800186741363212\n",
    "training time": 1386.05,
    "line number": "(1428, 31)",
    "node content": "<Number: 1e-7>",
    "related code": "    type_eps = {'float64': 1e-7,\n"
  },
  {
    "node type": "not_test",
    "accuracy": "",
    "training time": "",
    "line number": "(796, 51)",
    "node content": "PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: isinstance@796,19>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: output_pattern@796,30>, <Operator: ,>, <Name: list@796,46>]), <Operator: )>])])])",
    "related code": "            if not isinstance(output_pattern, list):\n"
  },
  {
    "node type": "operator",
    "accuracy": "",
    "training time": "",
    "line number": "(809, 45)",
    "node content": "<Operator: ==>",
    "related code": "        assert len(connection_pattern[ii]) == len(node.outputs)\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(898, 27)",
    "node content": "<Keyword: not>",
    "related code": "        if var.owner is not None:\n"
  },
  {
    "node type": "name",
    "accuracy": "",
    "training time": "",
    "line number": "(930, 26)",
    "node content": "<Name: output@930,20>",
    "related code": "        account_for(output)\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(940, 18)",
    "node content": "<Keyword: not>",
    "related code": "        if var not in var_to_app_to_idx:\n"
  },
  {
    "node type": "name",
    "accuracy": "",
    "training time": "",
    "line number": "(952, 18)",
    "node content": "<Name: elem@952,14>",
    "related code": "        visit(elem)\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(957, 18)",
    "node content": "<Keyword: not>",
    "related code": "        if var not in visited:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(1017, 19)",
    "node content": "<Keyword: not>",
    "related code": "        if node not in term_dict:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(1317, 18)",
    "node content": "<Keyword: not>",
    "related code": "        if var not in grad_dict:\n"
  },
  {
    "node type": "keyword",
    "accuracy": "0.800186741363212\n",
    "training time": 1617.64,
    "line number": "(1371, 47)",
    "node content": "<Keyword: in>",
    "related code": "    rval = [access_grad_cache(elem) for elem in wrt]\n"
  },
  {
    "node type": "keyword",
    "accuracy": "",
    "training time": "",
    "line number": "(587, 19)",
    "node content": "<Keyword: not>",
    "related code": "        if elem not in var_to_app_to_idx and elem is not cost \\\n"
  }
]